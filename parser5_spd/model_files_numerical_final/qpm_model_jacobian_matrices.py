# Auto-generated by DynareParser for model 'qpm_model.dyn'
# Generated: 2025-04-26T11:18:44.298591
# DO NOT EDIT MANUALLY - Re-run the parser instead

import numpy as np
from math import exp, log, log10, sin, cos, tan, asin, acos, atan, sinh, cosh, tanh, erf, sqrt, pi # Common functions

def jacobian_matrices(theta):
    # theta: A list or numpy array of parameter values in SPECIFIC order.
    # Expected order: ['b1', 'b4', 'a1', 'a2', 'g1', 'g2', 'g3', 'rho_DLA_CPI', 'rho_L_GDP_GAP', 'rho_rs', 'rho_rs2']

    # --- Parameter Unpacking ---
    expected_len = 11
    if len(theta) != expected_len:
        raise ValueError(f'Expected {expected_len} parameters, but got {len(theta)} parameters.')

    try:
        b1 = theta[0] # Index 0
        b4 = theta[1] # Index 1
        a1 = theta[2] # Index 2
        a2 = theta[3] # Index 3
        g1 = theta[4] # Index 4
        g2 = theta[5] # Index 5
        g3 = theta[6] # Index 6
        rho_DLA_CPI = theta[7] # Index 7
        rho_L_GDP_GAP = theta[8] # Index 8
        rho_rs = theta[9] # Index 9
        rho_rs2 = theta[10] # Index 10
    except IndexError:
        # Error message includes expected length
        raise IndexError(f'theta has incorrect length. Expected {expected_len}.')

    # --- Matrix Calculations ---
    A = np.zeros((10, 10), dtype=float)
    # Fill A non-zero elements
    A[0, 5] = b1 - 1
    A[0, 7] = b4
    A[1, 4] = a1 - 1
    A[2, 4] = g1 - 1
    A[2, 9] = g2*(g1 - 1)
    A[3, 4] = 1
    A[7, 4] = -1
    A[8, 8] = -1

    B = np.zeros((10, 10), dtype=float)
    # Fill B non-zero elements
    B[0, 1] = -1
    B[0, 5] = 1
    B[1, 0] = -1
    B[1, 4] = 1
    B[1, 5] = -a2
    B[2, 2] = -1
    B[2, 5] = g3*(g1 - 1)
    B[2, 6] = 1
    B[3, 6] = -1
    B[3, 7] = 1
    B[4, 1] = 1
    B[5, 0] = 1
    B[6, 2] = 1
    B[7, 8] = 1
    B[8, 9] = 1
    B[9, 3] = 1

    C = np.zeros((10, 10), dtype=float)
    # Fill C non-zero elements
    C[0, 5] = -b1
    C[1, 4] = -a1
    C[2, 6] = -g1
    C[4, 1] = -rho_L_GDP_GAP
    C[5, 0] = -rho_DLA_CPI
    C[6, 2] = -rho_rs
    C[6, 3] = -rho_rs2
    C[9, 2] = -1

    D = np.zeros((10, 3), dtype=float)
    # Fill D non-zero elements
    D[4, 0] = 1
    D[5, 1] = 1
    D[6, 2] = 1

    # --- Return results ---
    state_names = ['RES_DLA_CPI', 'RES_L_GDP_GAP', 'RES_RS', 'aux_RES_RS_lag1', 'DLA_CPI', 'L_GDP_GAP', 'RS', 'RR_GAP', 'aux_DLA_CPI_lead1', 'aux_DLA_CPI_lead2']
    shock_names = ['SHK_L_GDP_GAP', 'SHK_DLA_CPI', 'SHK_RS']

    return A, B, C, D, state_names, shock_names