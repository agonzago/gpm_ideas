# Auto-generated by DynareParser for model 'qpm_model.dyn'
# Generated: 2025-04-23T22:55:22.256372
import numpy as np
from math import * # Provides standard math functions

def jacobian_matrices(theta):
    # Unpack parameters (using original order)
    expected_len = 11
    if len(theta) != expected_len:
        raise ValueError(f'Expected {expected_len} parameters, got {len(theta)}')
    try:
        b1 = theta[0]
        b4 = theta[1]
        a1 = theta[2]
        a2 = theta[3]
        g1 = theta[4]
        g2 = theta[5]
        g3 = theta[6]
        rho_DLA_CPI = theta[7]
        rho_L_GDP_GAP = theta[8]
        rho_rs = theta[9]
        rho_rs2 = theta[10]
    except IndexError:
        raise IndexError('Parameter vector theta has incorrect length.')

    # Initialize and fill matrices
    A = np.zeros((9, 9), dtype=float)
    # Fill A non-zero elements
    A[0, 0] = b1 - 1
    A[0, 2] = b4
    A[0, 7] = -b4
    A[1, 1] = a1 - 1
    A[2, 1] = g1 - 1
    A[2, 8] = g2*(g1 - 1)
    A[6, 1] = -1
    A[7, 7] = -1

    B = np.zeros((9, 9), dtype=float)
    # Fill B non-zero elements
    B[0, 0] = 1
    B[0, 3] = -1
    B[1, 0] = -a2
    B[1, 1] = 1
    B[1, 4] = -1
    B[2, 0] = g3*(g1 - 1)
    B[2, 2] = 1
    B[2, 5] = -1
    B[3, 3] = 1
    B[4, 4] = 1
    B[5, 5] = 1
    B[6, 7] = 1
    B[7, 8] = 1
    B[8, 6] = 1

    C = np.zeros((9, 9), dtype=float)
    # Fill C non-zero elements
    C[0, 0] = -b1
    C[1, 1] = -a1
    C[2, 2] = -g1
    C[3, 3] = -rho_L_GDP_GAP
    C[4, 4] = -rho_DLA_CPI
    C[5, 5] = -rho_rs
    C[5, 6] = -rho_rs2
    C[8, 5] = -1

    D = np.zeros((9, 3), dtype=float)
    # Fill D non-zero elements
    D[3, 0] = 1
    D[4, 1] = 1
    D[5, 2] = 1

    # --- Return results ---
    state_names = ['L_GDP_GAP', 'DLA_CPI', 'RS', 'RES_L_GDP_GAP', 'RES_DLA_CPI', 'RES_RS', 'aux_RES_RS_lag1', 'aux_DLA_CPI_lead1', 'aux_DLA_CPI_lead2']
    shock_names = ['SHK_L_GDP_GAP', 'SHK_DLA_CPI', 'SHK_RS']

    return A, B, C, D, state_names, shock_names