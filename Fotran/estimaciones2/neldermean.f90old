subroutine nelmin ( fn,n, start, xmin, ynewlo, reqmin, &
     &     step, konvge, kcount, icount, numres, ifault )
  
  USE RANDOM_NORMAL_MOD
  USE RANDOM_UNIFORM_MOD
  ! c*********************************************************************72
  ! c
  ! cc NELMIN minimizes a function using the Nelder-Mead algorithm.
  ! c
  ! c  Discussion:
  ! c
  ! c    This routine seeks the minimum value of a user-specified function.
  ! c
  ! c     Simplex function minimisation procedure due to Nelder+Mead(1965),
  ! c     as implemented by O'Neill(1971, Appl.Statist. 20, 338-45), with
  ! c     subsequent comments by Chambers+Ertel(1974, 23, 250-1), Benyon(1976,
  ! c     25, 97) and Hill(1978, 27, 380-2)
  ! c
  ! c    The function to be minimized must be defined by a function of
  ! c    the form
  ! c
  ! c      function fn ( x, f, outf )
  ! c      double precision fn
  ! c      double precision x(*)
  ! c
  ! c    and the name of this subroutine must be declared EXTERNAL in the
  ! c    calling routine and passed as the argument FN.
  ! c
  ! c    This routine does not include a termination test using the
  ! c    fitting of a quadratic surface.
  ! c
  ! c  Modified:
  ! c
  ! c    27 February 2008
  ! c
  ! c  Author:
  ! c
  ! c    FORTRAN77 version by R ONeill
  ! c    Modifications by John Burkardt
  ! c
  ! c  Reference:
  ! c
  ! c    John Nelder, Roger Mead,
  ! c    A simplex method for function minimization,
  ! c    Computer Journal,
  ! c    Volume 7, 1965, pages 308-313.
  ! c
  ! c    R ONeill,
  ! c    Algorithm AS 47:
  ! c    Function Minimization Using a Simplex Procedure,
  ! c    Applied Statistics,
  ! c    Volume 20, Number 3, 1971, pages 338-345.
  ! c
  ! c  Parameters:
  ! c
  ! c    Input, external FN, the name of the function which evaluates
  ! c    the function to be minimized.
  ! c
  ! c    Input, integer N, the number of variables.
  ! c
  ! c    Input/output, double precision START(N).  On input, a starting point
  ! c    for the iteration.  On output, this data may have been overwritten.
  ! c
  ! c    Output, double precision XMIN(N), the coordinates of the point which
  ! c    is estimated to minimize the function.
  ! c
  ! c    Output, double precision YNEWLO, the minimum value of the function.
  ! c
  ! c    Input, double precision REQMIN, the terminating limit for the variance
  ! c    of function values.
  ! c
  ! c    Input, double precision STEP(N), determines the size and shape of the
  ! c    initial simplex.  The relative magnitudes of its elements should reflect
  ! c    the units of the variables.
  ! c
  ! c    Input, integer KONVGE, the convergence check is carried out every
  ! c    KONVGE iterations.
  ! c
  ! c    Input, integer KCOUNT, the maximum number of function evaluations.
  ! c
  ! c    Output, integer ICOUNT, the number of function evaluations used.
  ! c
  ! c    Output, integer NUMRES, the number of restarts.
  ! c
  ! c    Output, integer IFAULT, error indicator.
  ! c    0, no errors detected.
  ! c    1, REQMIN, N, or KONVGE has an illegal value.
  ! c    2, iteration terminated because KCOUNT was exceeded without convergence.
  ! c
  !       implicit none

  ! C Modifications by Andres Gonzalez
!  integer NPAR
!  double precision PAR(NPAR)
  double precision outf

  integer n
  !integer n_max
  !parameter ( n_max = 200 )

  double precision ccoeff
  parameter ( ccoeff = 0.5D+00 )
  double precision del
  double precision dn
  double precision dnn
  double precision ecoeff
  parameter ( ecoeff = 2.0D+00 )
  double precision eps
  parameter ( eps = 0.001D+00 )
  !C$$$      double precision fn 
  external fn
  integer i
  integer icount
  integer ifault
  integer ihi
  integer ilo
  integer j
  integer jcount
  integer kcount
  integer konvge
  integer l
  integer nn
  integer numres
  integer jbug
  ! double precision p(n_max,n_max+1)
!   double precision pstar(n_max)
!   double precision p2star(n_max)
!   double precision pbar(n_max)
  
  double precision p(n,n+1)
  double precision ptest(n,n+1)
  double precision pstar(n)
  double precision p2star(n)
  double precision pbar(n)
  
  double precision rcoeff
  parameter ( rcoeff = 1.0D+00 )
  double precision reqmin
  double precision rq
  double precision start(n)
  double precision step(n)
  double precision x
  double precision xmin(n)
!   double precision y(n_max+1)
  double precision y(n+1)
  double precision y2star
  double precision ylo
  double precision ynewlo
  double precision ystar
  double precision z
  double precision crit1, crit2
  INTEGER, PARAMETER  :: dp = SELECTED_REAL_KIND(12, 60)
  real(dp), parameter :: TOLF = 300000.0_dp*sqrt(EPSILON(1.0_dp))
  real(dp), parameter :: TOLX = 300000.0_dp*sqrt(EPSILON(1.0_dp))
  REAL(DP), DIMENSION(N) :: DX0
  REAL(DP) tmp , NORMX
  integer ITERN
  
     
  crit2= 0.0
  crit1= 0.0
!  print * ,TOLF
!  print * ,TOLX
  ! c
  ! c  Check the input parameters.
  ! c
  if ( reqmin .le. 0.0D+00 ) then
     ifault = 1
     return
  end if

  if ( n .lt. 1 ) then
     ifault = 1
     return
  end if

!   if ( n_max .lt. n ) then
!      ifault = 1
!      return
!   end if

  if ( konvge .lt. 1 ) then
     ifault = 1
     return
  end if

  icount = 0
  numres = 0

  jcount = konvge  
  dn = dble ( n )   
  nn = n + 1         
  dnn = dble ( nn ) 
  del = 1.0D+00
  rq = reqmin * dn
  ! c
  ! c  Construction of initial simplex.
  ! c
10 continue
  !nn = n + 1 p(i, n+1)
  ! do i = 1, n     
!      p(i,nn) = start(i)
!   end do
  
  p(1:n, nn) = start(1:n) 
  call fn(N, start,outf)  
  do while ( isnan(outf) )
     print *,"Function not define at initial values"
     tmp = RANDOM_UNIFORM(real(0.0), real(0.05))
     start = tmp*start
     call fn(N, start,outf)
  end do
  y(nn) = outf
  do j = 1, n       
     x = start(j)     
     start(j) = start(j) + step(j) * del
     p(1:n,j) = start
     !      do i = 1, n
     !         p(i,j) = start(i)
     !      end do
     call fn(N,start,outf)           
     do while ( isnan(outf) )
        print *,"Random steps in the intial simplex"
        start(j) = x
        tmp = RANDOM_UNIFORM(real(0.0), real(0.05))
        step(j) = tmp*step(j)
        start(j) = start(j) + step(j) * del
        !print *, start(j)
        call fn(N,start,outf)           
     end do
     y(j) = outf 
     start(j) = x
  end do

  icount = icount + nn
  ! c                    
  ! c  The simplex construction is complete.
  ! c                    
  ! c  Find highest and lowest Y values.  YNEWLO = Y(IHI) indicates
  ! c  the vertex of the simplex to be replaced.
  ! c                    
  ylo = y(1)
  ilo = 1

  do i = 2, nn
     if ( y(i) .lt. ylo ) then
        ylo = y(i) 
        ilo = i
     end if
  end do

50 continue

  ynewlo = y(1)
  ihi = 1

  do i = 2, nn
     if ( ynewlo .lt. y(i) ) then
        ynewlo = y(i)
        ihi = i
     end if
  end do
  

!21 format'('icount ', i4, '   current f   ' ,E10.4)'

  
  ! c     Calculate PBAR, the centroid of the simplex vertices
  ! c     excepting the vertex with Y value YNEWLO.
  ! c
  
  do i = 1, n
     z = 0.0D+00
     do j = 1, nn    
        z = z + p(i,j)
     end do
!      print *, z
     !z = sum(p(i,1:nn))
!      print *, z
     z = z - p(i,ihi)   
     pbar(i) = z / dn   
  end do
  ! c
  ! c  Reflection through the centroid.
  ! c
  !call fn(n,pbar,  outf) 
  !print *, outf
  do i = 1, n
     pstar(i) = pbar(i) + rcoeff * ( pbar(i) - p(i,ihi) )
  end do
  
  call fn(n,pstar,  outf) 
  do while ( isnan(outf) ) 
     print *, "Reflection through the centroid."
     tmp = RANDOM_UNIFORM(real(0.0), real(2.0))     
     do i = 1, n
        pstar(i) = pbar(i) + (tmp*rcoeff) * ( pbar(i) - p(i,ihi) )
     end do          
     call fn(n,pstar,  outf) 
     !print *, outf
  end do
  
  ystar = outf
  !c     fn ( pstar )
  icount = icount + 1
  ! c
  ! c  Successful reflection, so extension.
  ! c
  if ( ystar .lt. ylo ) then
     
     do i = 1, n
        p2star(i) = pbar(i) + ecoeff * ( pstar(i) - pbar(i) )
     end do
     call fn(n,p2star, outf) 
     do while ( isnan(outf) ) 
        print *, "Successful reflection, so extension"        
        tmp = RANDOM_UNIFORM(real(0.0), real(2.0))
        do i = 1, n
            p2star(i) = pbar(i) + (tmp*ecoeff)* ( pstar(i) - pbar(i) )            
        end do        
        call fn(n,p2star,  outf) 
     end do
     
     
     y2star = outf
     !     fn ( p2star )
     icount = icount + 1
     ! c
     ! c  Check extension.
     ! c
     if ( ystar .lt. y2star ) then

        do i = 1, n
           p(i,ihi) = pstar(i)
        end do

        y(ihi) = ystar
        ! c
        ! c  Retain extension or contraction.
        ! c
     else

        do i = 1, n
           p(i,ihi) = p2star(i)
        end do

        y(ihi) = y2star

     end if
     ! c
     ! c  No extension.
     ! c
  else

     l = 0
     do i = 1, nn
        if ( ystar .lt. y(i) ) then
           l = l + 1
        end if
     end do

     if ( 1 .lt. l ) then

        do i = 1, n
           p(i,ihi) = pstar(i)
        end do

        y(ihi) = ystar
        ! c
        ! c  Contraction on the  Y(IHI) side of the centroid.
        ! c
     else if ( l .eq. 0 ) then

        do i = 1, n
           p2star(i) = pbar(i) + ccoeff * ( p(i,ihi) - pbar(i) )
        end do
        call fn(n,p2star,   outf) 
        do while ( isnan(outf) ) 
           print *, "Contraction on the  Y(IHI) side of the centroid."
           tmp = RANDOM_UNIFORM(real(0.0), real(2.0))
           do i = 1, n
              p2star(i) = pbar(i) + (tmp*ecoeff)* ( p(i,ihi) - pbar(i) )
           end do
           call fn(n,p2star,outf) 
        end do
        
        y2star = outf        
        icount = icount + 1
        ! c
        ! c  Contract the whole simplex.
        ! c
        if ( y(ihi) .lt. y2star ) then

           do j = 1, nn
              do i = 1, n
                 p(i,j) = ( p(i,j) + p(i,ilo) ) * 0.5D+00
                 xmin(i) = p(i,j)
              end do
              call fn(n,xmin, outf)              
              y(j) = outf
              if ( isnan(outf)) then 
                 print*, "You suck"
              end if
              !     fn ( xmin )
           end do

           icount = icount + nn
           if ( kcount .lt. icount ) then
              go to 260
           end if

           ylo = y(1)
           ilo = 1

           do i = 2, nn
              if ( y(i) .lt. ylo ) then
                 ylo = y(i) 
                 ilo = i
              end if
           end do

           go to 50
           ! c
           ! c  Retain contraction.
           ! c
        else

           do i = 1, n
              p(i,ihi) = p2star(i)
           end do
           y(ihi) = y2star

        end if
        ! c
        ! c  Contraction on the reflection side of the centroid.
        ! c
     else if ( l .eq. 1 ) then

        do i = 1, n
           p2star(i) = pbar(i) + ccoeff * ( pstar(i) - pbar(i) )
        end do

        call fn(n,p2star,  outf)
        do while ( isnan(outf) ) 
           print *, "Contraction on the reflection side of the centroid"
           tmp = RANDOM_UNIFORM(real(0.0), real(10.0))
           do i = 1, n
              p2star(i) = pbar(i) + (tmp*ecoeff)*( pstar(i) - pbar(i) )              
           end do
           call fn(n,p2star,outf) 
        end do

        
        y2star = outf
        icount = icount + 1
        ! c
        ! c  Retain reflection?
        ! c
        if ( y2star .le. ystar ) then

           do i = 1, n
              p(i,ihi) = p2star(i)
           end do
           y(ihi) = y2star

        else

           do i = 1, n
              p(i,ihi) = pstar(i)
           end do
           y(ihi) = ystar  

        end if

     end if

  end if
  ! c
  ! c  Check if YLO improved.
  ! c
  if ( y(ihi) .lt. ylo ) then
     ylo = y(ihi)
     ilo = ihi
  end if

  jcount = jcount - 1

  if ( jcount .ne. 0 ) then
     go to 50
  end if
  ! c
  ! c  Check to see if minimum reached.
  ! c     

  ! Modificacions por Pietro Bugnaldi... 
  IF ( ICOUNT .LE. KCOUNT ) THEN

     JCOUNT = KONVGE
     PTEST = P
     DO JBUG =1,NN
        PTEST(1:N,JBUG)  = abs(P(1:N, JBUG) - P(1:N, ILO))
     END DO
     !print *,'Ys = ', MAXVAL(Y - Y(ILO))
     !print *,' ps = ', MAXVAL(PTEST)
     crit1 = MAXVAL(Y - Y(ILO))
     crit2 = MAXVAL(PTEST)

     
     write(*, '(a, i4, a, ES14.5, a,ES14.5, a, ES14.5 )'), 'icount ', icount, ' current f ', y(ilo), &
          &' TolF ', crit1, ' TolX ', crit2
  
     IF ( (crit1 .GE. TOLF ) ) then !.OR. (crit2 .GE. TOLX) ) THEN 
        GO TO 50
     END IF
       
  END IF
  
!   IF ( icount .le. kcount ) then

!      jcount = konvge
     
!      !z = 0.0D+00
 
     
!      ! do i = 1, nn
! !         z = z + y(i)
! !      end do
!      x = sum(y(1:nn))/dnn
!      !x = z / dnn
     
! !     z = 0.0D+00
     
! !      do i = 1, nn
! !         z = z + ( y(i) - x )**2
! !      end do
!      z = sum((y(1:nn) - x)**2)
!      z = sqrt(z/dnn)
!      !print*, rq , z, ( rq .lt. z )
     
!      if ( rq .lt. z ) then
!         go to 50
!      end if

!   end if
  ! c
  ! c  Factorial tests to check that YNEWLO is a local minimum.
  ! c
260 continue

  do i = 1, n
     xmin(i) = p(i,ilo)
  end do

  ynewlo = y(ilo)

  if ( kcount .lt. icount ) then
     ifault = 2
     return
  end if

  ifault = 0



!   do i = 1, n
!      del = step(i) * eps
!      xmin(i) = xmin(i) + del
!      call fn(xmin, N,  outf)
!      z = outf
! !    c     fn ( xmin )
!      icount = icount + 1
!      if ( z .lt. ynewlo ) then
!         ifault = 2
!         go to 290
!      end if
!      xmin(i) = xmin(i) - del - del
!      call fn(xmin,N,  outf)
!      z = outf
!      !     z = fn ( xmin )
!      icount = icount + 1
!      if ( z .lt. ynewlo ) then
!         ifault = 2
!         go to 290
!      end if
!      xmin(i) = xmin(i) + del
!   end do

! 290 continue

!   if ( ifault == 0 ) then
!      return
!   end if
!   ! c
!   ! c  Restart the procedure.
!   ! c
!   do i = 1, n
!      start(i) = xmin(i)
!   end do


!   del = eps
!   numres = numres + 1

!   go to 10

! 21 format('Numres ',i4,'   out of max ',i4,'  current f' &
!         &  ,f10.4,'  current x '/2x,6f12.6/4x,6f12.6/4x,6f12.6/6x,6f12.6)


end subroutine nelmin
subroutine timestamp ( )

  ! c*********************************************************************72
  ! c
  ! cc TIMESTAMP prints out the current YMDHMS date as a timestamp.
  ! c
  ! c  Discussion:
  ! c
  ! c    This FORTRAN77 version is made available for cases where the
  ! c    FORTRAN90 version cannot be used.
  ! c
  ! c  Modified:
  ! c
  ! c    12 January 2007
  ! c
  ! c  Author:
  ! c
  ! c    John Burkardt
  ! c
  ! c  Parameters:
  ! c
  ! c    None
  ! c
  implicit none

  character * ( 8 ) ampm
  integer d
  character * ( 8 ) date
  integer h
  integer m
  integer mm
  character * ( 9 ) month(12)
  integer n
  integer s
  character * ( 10 ) time
  integer y

  save month

  data month / &
  &  'January  ', 'February ', 'March    ', 'April    ', &
  &  'May      ', 'June     ', 'July     ', 'August   ', &
  &  'September', 'October  ', 'November ', 'December ' /

  call date_and_time ( date, time )

  read ( date, '(i4,i2,i2)' ) y, m, d
  read ( time, '(i2,i2,i2,1x,i3)' ) h, n, s, mm

  if ( h .lt. 12 ) then
     ampm = 'AM'
  else if ( h .eq. 12 ) then
     if ( n .eq. 0 .and. s .eq. 0 ) then
        ampm = 'Noon'
     else
        ampm = 'PM'
     end if
  else
     h = h - 12
     if ( h .lt. 12 ) then
        ampm = 'PM'
     else if ( h .eq. 12 ) then
        if ( n .eq. 0 .and. s .eq. 0 ) then
           ampm = 'Midnight'
        else
           ampm = 'AM'
        end if
     end if
  end if

!   write ( *,
!   &  '(i2,1x,a,1x,i4,2x,i2,a1,i2.2,a1,i2.2,a1,i3.3,1x,a)' )
!   &  d, month(m), y, h, ':', n, ':', s, '.', mm, ampm

  return
end subroutine timestamp

