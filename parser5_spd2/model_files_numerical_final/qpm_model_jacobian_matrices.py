# Auto-generated by DynareParser for model 'qpm_model.dyn'
# Generated on: 2025-04-27 17:20:35
# DO NOT EDIT MANUALLY - Changes will be overwritten.

import numpy as np
from math import *

def jacobian_matrices(theta):
    """
    Computes the Jacobian matrices A, B, C, D for the model 'qpm_model.dyn'.

    Args:
        theta (list or np.ndarray): Parameter vector of length 11
            Expected order: ['b1', 'b4', 'a1', 'a2', 'g1', 'g2', 'g3', 'rho_DLA_CPI', 'rho_L_GDP_GAP', 'rho_rs', 'rho_rs2']

    Returns:
        tuple: (A, B, C, D, state_names, shock_names)
            A, B, C: (10 x 10) numpy arrays
            D: (10 x 3) numpy array
            state_names: List of state variable names (order corresponds to matrix columns)
            shock_names: List of shock names (order corresponds to D matrix columns)
    """
    # --- Parameter Unpacking ---
    expected_len = 11
    if len(theta) != expected_len:
        raise ValueError(f'Expected {expected_len} parameters, but received {len(theta)}.')

    # Unpack only the parameters used in the Jacobians
    b1 = theta[0]
    b4 = theta[1]
    a1 = theta[2]
    a2 = theta[3]
    g1 = theta[4]
    g2 = theta[5]
    g3 = theta[6]
    rho_DLA_CPI = theta[7]
    rho_L_GDP_GAP = theta[8]
    rho_rs = theta[9]
    rho_rs2 = theta[10]

    # --- Matrix Calculation ---
    A = np.zeros((10, 10), dtype=float)
    # Fill non-zero elements of A
    A[0, 5] = a1 - 1
    A[1, 5] = g1 - 1
    A[1, 9] = g2*(g1 - 1)
    A[2, 5] = 1
    A[3, 6] = b1 - 1
    A[3, 7] = b4
    A[6, 5] = -1
    A[7, 8] = -1

    B = np.zeros((10, 10), dtype=float)
    # Fill non-zero elements of B
    B[0, 0] = -1
    B[0, 5] = 1
    B[0, 6] = -a2
    B[1, 1] = -1
    B[1, 2] = 1
    B[1, 6] = g3*(g1 - 1)
    B[2, 2] = -1
    B[2, 7] = 1
    B[3, 6] = -rho_L_GDP_GAP*(b1 - 1) + 1
    B[3, 7] = -b4*rho_L_GDP_GAP
    B[4, 0] = 1
    B[5, 1] = 1
    B[6, 8] = 1
    B[7, 9] = 1
    B[8, 3] = 1
    B[9, 4] = 1

    C = np.zeros((10, 10), dtype=float)
    # Fill non-zero elements of C
    C[0, 5] = -a1
    C[1, 2] = -g1
    C[3, 3] = b1*rho_L_GDP_GAP
    C[3, 6] = -b1 - rho_L_GDP_GAP
    C[4, 0] = -rho_DLA_CPI
    C[5, 1] = -rho_rs
    C[5, 4] = -rho_rs2
    C[8, 6] = -1
    C[9, 1] = -1

    D = np.zeros((10, 3), dtype=float)
    # Fill non-zero elements of D
    D[3, 0] = -1
    D[4, 1] = -1
    D[5, 2] = -1

    # --- Return Results ---
    state_names = ['RES_DLA_CPI', 'RES_RS', 'RS', 'aux_L_GDP_GAP_lag1', 'aux_RES_RS_lag1', 'DLA_CPI', 'L_GDP_GAP', 'RR_GAP', 'aux_DLA_CPI_lead1', 'aux_DLA_CPI_lead2']
    shock_names = ['SHK_L_GDP_GAP', 'SHK_DLA_CPI', 'SHK_RS']

    return A, B, C, D, state_names, shock_names